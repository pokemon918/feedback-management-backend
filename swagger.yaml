openapi: 3.0.0
info:
  title: Sentiment Analysis API
  description: API for sentiment analysis of customer feedback
  version: 1.0.0

servers:
  - url: http://localhost:8000
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
        createdAt:
          type: string
          format: date-time

    Feedback:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        text:
          type: string
          maxLength: 1000
        sentimentScore:
          type: number
          format: float
        sentimentLabel:
          type: string
          enum: [Good, Bad, Neutral]
        userId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        message:
          type: string

security:
  - BearerAuth: []

paths:
  /api/auth/signup:
    post:
      security: []
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - password
              properties:
                name:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [user, admin]
                  default: user
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/signin:
    post:
      security: []
      tags:
        - Authentication
      summary: User sign in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login

  /api/feedback:
    post:
      summary: Submit feedback
      security:
        - BearerAuth: []
      tags:
        - Feedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  maxLength: 1000
      responses:
        '201':
          description: Feedback created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
        '400':
          description: Invalid input
        '409':
          description: User already has existing feedback

  /api/feedback/all:
    get:
      tags:
        - Feedback
      summary: Get all feedback (admin only)
      responses:
        '200':
          description: List of all feedback
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feedback'
        '403':
          description: Access denied - Admin only

  /api/feedback/user:
    get:
      tags:
        - Feedback
      summary: Get current user's feedback
      responses:
        '200':
          description: User's feedback
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feedback'

  /api/feedback/{feedbackId}:
    put:
      tags:
        - Feedback
      summary: Update feedback
      parameters:
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  maxLength: 1000
      responses:
        '200':
          description: Feedback updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
        '404':
          description: Feedback not found or unauthorized
    
    delete:
      tags:
        - Feedback
      summary: Delete feedback
      parameters:
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Feedback deleted successfully
        '404':
          description: Feedback not found or unauthorized

  /api/auth/username/{userId}:
    get:
      tags:
        - Authentication
      summary: Get username by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Username retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/feedback/admin/{feedbackId}:
    delete:
      tags:
        - Feedback
      summary: Delete any feedback (admin only)
      parameters:
        - name: feedbackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Feedback deleted successfully
        '403':
          description: Access denied - Admin only
        '404':
          description: Feedback not found 